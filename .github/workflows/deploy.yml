# This is a basic workflow to help you get started with Actions

name: Deploy TAP

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch

env:
  AZURE_SP_CLIENT_ID: ${{ secrets.AZURE_SP_CLIENT_ID }}
  AZURE_SP_CLIENT_SECRET: ${{ secrets.AZURE_SP_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_ACCESS_KEY }}
  SHARED_INSTALL_REPO: vmware
  TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_azure_sp_client_id: ${{ secrets.AZURE_SP_CLIENT_ID }}
  TF_VAR_azure_sp_client_secret: ${{ secrets.AZURE_SP_CLIENT_SECRET }}
  INSTALL_BUNDLE: registry.tanzu.vmware.com/tanzu-cluster-essentials/cluster-essentials-bundle@sha256:e00f33b92d418f49b1af79f42cb13d6765f1c8c731f4528dfff8343af042dc3e
  # INSTALL_REGISTRY_HOSTNAME: registry.tanzu.vmware.com
  INSTALL_REGISTRY_USERNAME: ${{ secrets.AZURE_SP_CLIENT_ID }}
  INSTALL_REGISTRY_PASSWORD: ${{ secrets.AZURE_SP_CLIENT_SECRET }}
  TAP_VERSION: 1.4.5
  TANZU_REGISTRY_HOSTNAME: registry.tanzu.vmware.com
  TANZU_REGISTRY_USERNAME: ${{ secrets.INSTALL_REGISTRY_USERNAME }}
  TANZU_REGISTRY_PASSWORD: ${{ secrets.INSTALL_REGISTRY_PASSWORD }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Create:
    name: Create infra and deploy TAP
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: 'Install tool: pivnet cli'
        run: |
          wget -nv -O pivnet https://github.com/pivotal-cf/pivnet-cli/releases/download/v3.0.1/pivnet-linux-amd64-3.0.1
          chmod +x pivnet
          sudo mv pivnet /usr/local/bin
          pivnet version
      
      - name: Azure login
        run: |
          account=$(az login --service-principal -u $AZURE_SP_CLIENT_ID -p $AZURE_SP_CLIENT_SECRET --tenant $AZURE_TENANT_ID)
          echo $account
          export TF_VAR_azure_subscription_id=$(echo $account | jq -r .[].id)

      - name: 'Install tool: tanzu cli'
        run: |
          PIVNET_API_TOKEN=$(az keyvault secret show -n pivnet-api-token --vault-name kv-tanzu | jq -r .value)
          pivnet login --api-token $PIVNET_API_TOKEN
          pivnet download-product-files --product-slug='tanzu-application-platform' --release-version='1.3.0' --product-file-id=1310085
          mkdir $HOME/tanzu
          tar -xvf tanzu-framework-linux-amd64.tar -C $HOME/tanzu
          export TANZU_CLI_NO_INIT=true
          pushd $HOME/tanzu
          export VERSION=v0.25.0
          sudo install cli/core/$VERSION/tanzu-core-linux_amd64 /usr/local/bin/tanzu
          tanzu version
          tanzu plugin install --local cli all
          tanzu plugin list --local cli all
          popd

      - name: 'Install tool: cluster essentials'
        run: |
          pivnet download-product-files --product-slug='tanzu-cluster-essentials' --release-version='1.3.0' --product-file-id=1330470
          mkdir $HOME/tanzu-cluster-essentials
          tar -xvf tanzu-cluster-essentials-linux-amd64-1.3.0.tgz -C $HOME/tanzu-cluster-essentials
          sudo cp $HOME/tanzu-cluster-essentials/imgpkg /usr/local/bin/imgpkg

      - name: 'Install tool: yq'
        run: |
          VERSION=v4.34.1
          BINARY=yq_linux_amd64
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | \
            tar xz && mv ${BINARY} $HOME/yq
          yq --version

      - name: 'Install tool: moreutils'
        run: |
          sudo apt-get update
          sudo apt-get install moreutils -y

      - name: Create infra
        run: |
          pushd terraform
          terraform init
          terraform plan -out tf.plan -detailed-exitcode || state=$? # 0 = No changes; 1 = Error; 2 = There are changes
          echo "'terraform plan' returned a status code of $state."
          [[ $state == 1 ]] && echo "Exiting" && exit 1
          [[ $state == 2 ]] && echo "Applying plan" && terraform apply -auto-approve tf.plan
          popd
      
      - name: Get terraform output
        run: |
          pushd terraform
          terraform init
          echo "RESOURCE_GROUP=$(terraform output --raw resource_group_name)" >> $GITHUB_ENV
          echo "VIEW_CLUSTER_NAME=$(terraform output --raw view_cluster_name)" >> $GITHUB_ENV
          echo "BUILD_CLUSTER_NAME=$(terraform output --raw build_cluster_name)" >> $GITHUB_ENV
          echo "RUN_CLUSTER_NAME=$(terraform output --raw run_cluster_name)" >> $GITHUB_ENV
          echo "ITERATE_CLUSTER_NAME=$(terraform output --raw iterate_cluster_name)" >> $GITHUB_ENV
          echo "SHARED_CONTAINER_REGISTRY_NAME=$(terraform output --raw container_registry_name)" >> $GITHUB_ENV
          echo "SHARED_CONTAINER_REGISTRY_HOSTNAME=$(terraform output --raw container_registry_hostname)" >> $GITHUB_ENV
          echo "INSTALL_REGISTRY_HOSTNAME=$(terraform output --raw container_registry_hostname)" >> $GITHUB_ENV
          popd

      - name: Relocate images to shared registry
        run: |
          az acr login -n $SHARED_CONTAINER_REGISTRY_NAME
          docker login $TANZU_REGISTRY_HOSTNAME -u $TANZU_REGISTRY_USERNAME -p $TANZU_REGISTRY_PASSWORD
          imgpkg copy -b registry.tanzu.vmware.com/tanzu-application-platform/tap-packages:${TAP_VERSION} --to-repo ${SHARED_CONTAINER_REGISTRY_HOSTNAME}/${SHARED_INSTALL_REPO}/tap-packages --include-non-distributable-layers
          imgpkg copy -b $INSTALL_BUNDLE --to-repo ${SHARED_CONTAINER_REGISTRY_HOSTNAME}/${SHARED_INSTALL_REPO}/cluster-essentials-bundle --include-non-distributable-layers
          echo "INSTALL_BUNDLE=${SHARED_CONTAINER_REGISTRY_HOSTNAME}/${SHARED_INSTALL_REPO}/cluster-essentials-bundle@sha256:e00f33b92d418f49b1af79f42cb13d6765f1c8c731f4528dfff8343af042dc3e" >> $GITHUB_ENV
        
      ## VIEW CLUSTER #########################################################

      - name: Install cluster essentials on 'view' cluster
        run: |
          [[ -z "$RESOURCE_GROUP" ]] && echo 'RESOURCE_GROUP must be set.' && exit 1
          [[ -z "$VIEW_CLUSTER_NAME" ]] && echo 'VIEW_CLUSTER_NAME must be set.' && exit 1
          az aks get-credentials -g $RESOURCE_GROUP -n $VIEW_CLUSTER_NAME --admin --overwrite-existing
          pushd $HOME/tanzu-cluster-essentials
          ./install.sh --yes
          popd

      - name: Add TAP package repository on 'view' cluster
        run: |
          az aks get-credentials -g $RESOURCE_GROUP -n $VIEW_CLUSTER_NAME --admin --overwrite-existing
          [[ -z "$(kubectl get ns | grep 'tap-install')" ]] && kubectl create ns tap-install
          tanzu secret registry add tap-registry \
            --username ${AZURE_SP_CLIENT_ID} \
            --password ${AZURE_SP_CLIENT_SECRET} \
            --server ${SHARED_CONTAINER_REGISTRY_HOSTNAME} \
            --export-to-all-namespaces \
            --yes \
            --namespace tap-install
          tanzu package repository add tanzu-tap-repository \
            --url ${SHARED_CONTAINER_REGISTRY_HOSTNAME}/${SHARED_INSTALL_REPO}/tap-packages:$TAP_VERSION \
            --namespace tap-install \
            --wait
          tanzu package repository get tanzu-tap-repository --namespace tap-install
          tanzu package available list --namespace tap-install

      - name: 'Deploy TAP profile: view'
        run: |
          echo "Setup auth0 variables."
          export AUTH0_CLIENT_ID=$(az keyvault secret show -n auth0-client-id --vault-name kv-tanzu | jq -r .value)
          export AUTH0_CLIENT_SECRET=$(az keyvault secret show -n auth0-client-secret --vault-name kv-tanzu | jq -r .value)
          # az aks get-credentials -g $RESOURCE_GROUP -n $VIEW_CLUSTER_NAME --admin --overwrite-existing
          pushd tap
          envsubst < view-values.yaml > view-values-final.yaml
          tanzu package install tap -p tap.tanzu.vmware.com -v $TAP_VERSION --values-file view-values-final.yaml -n tap-install
          rm view-values-final.yaml
          popd
          tanzu package installed get tap -n tap-install
          tanzu package installed list -A
        
      ## BUILD CLUSTER ########################################################

      - name: Install cluster essentials on 'build' cluster
        run: |
          [[ -z "$RESOURCE_GROUP" ]] && echo 'RESOURCE_GROUP must be set.' && exit 1
          [[ -z "$BUILD_CLUSTER_NAME" ]] && echo 'BUILD_CLUSTER_NAME must be set.' && exit 1
          az aks get-credentials -g $RESOURCE_GROUP -n $BUILD_CLUSTER_NAME --admin --overwrite-existing
          pushd $HOME/tanzu-cluster-essentials
          ./install.sh --yes
          popd

      - name: Add TAP package repository on 'build' cluster
        run: |
          az aks get-credentials -g $RESOURCE_GROUP -n $BUILD_CLUSTER_NAME --admin --overwrite-existing
          [[ -z "$(kubectl get ns | grep 'tap-install')" ]] && kubectl create ns tap-install
          tanzu secret registry add tap-registry \
            --username ${AZURE_SP_CLIENT_ID} \
            --password ${AZURE_SP_CLIENT_SECRET} \
            --server ${SHARED_CONTAINER_REGISTRY_HOSTNAME} \
            --export-to-all-namespaces \
            --yes \
            --namespace tap-install
          tanzu package repository add tanzu-tap-repository \
            --url ${SHARED_CONTAINER_REGISTRY_HOSTNAME}/${SHARED_INSTALL_REPO}/tap-packages:$TAP_VERSION \
            --namespace tap-install \
            --wait
          tanzu package repository get tanzu-tap-repository --namespace tap-install
          tanzu package available list --namespace tap-install

      - name: 'Deploy TAP profile: build'
        run: |
          # az aks get-credentials -g $RESOURCE_GROUP -n $BUILD_CLUSTER_NAME --admin --overwrite-existing
          kubectl get ns dev || state=$? # 1 = Namespace not found
          echo "'kubectl get ns dev' returned a status code of $state."
          [[ $state == 1 ]] && kubectl create ns dev
          pushd tap
          envsubst < build-values.yaml > build-values-final.yaml
          tanzu package install tap -p tap.tanzu.vmware.com -v $TAP_VERSION --values-file build-values-final.yaml -n tap-install
          rm build-values-final.yaml
          popd
          tanzu package installed get tap -n tap-install
          tanzu package installed list -A

      - name: Create TAP GUI viewer service account
        run: |
          pushd tap
          kubectl apply -f tap-gui-viewer-service-account-rbac.yaml
          popd
        
      ## RUN CLUSTER ##########################################################

      - name: Install cluster essentials on 'run' cluster
        run: |
          [[ -z "$RESOURCE_GROUP" ]] && echo 'RESOURCE_GROUP must be set.' && exit 1
          [[ -z "$RUN_CLUSTER_NAME" ]] && echo 'RUN_CLUSTER_NAME must be set.' && exit 1
          az aks get-credentials -g $RESOURCE_GROUP -n $RUN_CLUSTER_NAME --admin --overwrite-existing
          pushd $HOME/tanzu-cluster-essentials
          ./install.sh --yes
          popd

      - name: Add TAP package repository on 'run' cluster
        run: |
          az aks get-credentials -g $RESOURCE_GROUP -n $RUN_CLUSTER_NAME --admin --overwrite-existing
          [[ -z "$(kubectl get ns | grep 'tap-install')" ]] && kubectl create ns tap-install
          tanzu secret registry add tap-registry \
            --username ${AZURE_SP_CLIENT_ID} \
            --password ${AZURE_SP_CLIENT_SECRET} \
            --server ${SHARED_CONTAINER_REGISTRY_HOSTNAME} \
            --export-to-all-namespaces \
            --yes \
            --namespace tap-install
          tanzu package repository add tanzu-tap-repository \
            --url ${SHARED_CONTAINER_REGISTRY_HOSTNAME}/${SHARED_INSTALL_REPO}/tap-packages:$TAP_VERSION \
            --namespace tap-install \
            --wait
          tanzu package repository get tanzu-tap-repository --namespace tap-install
          tanzu package available list --namespace tap-install

      - name: 'Deploy TAP profile: run'
        run: |
          # az aks get-credentials -g $RESOURCE_GROUP -n $RUN_CLUSTER_NAME --admin --overwrite-existing
          pushd tap
          tanzu package install tap -p tap.tanzu.vmware.com -v $TAP_VERSION --values-file run-values.yaml -n tap-install
          popd
          tanzu package installed get tap -n tap-install
          tanzu package installed list -A

      - name: Create TAP GUI viewer service account
        run: |
          pushd tap
          kubectl apply -f tap-gui-viewer-service-account-rbac.yaml
          popd
        
      ## ITERATE CLUSTER ######################################################

      - name: Install cluster essentials on 'iterate' cluster
        run: |
          [[ -z "$RESOURCE_GROUP" ]] && echo 'RESOURCE_GROUP must be set.' && exit 1
          [[ -z "$ITERATE_CLUSTER_NAME" ]] && echo 'ITERATE_CLUSTER_NAME must be set.' && exit 1
          az aks get-credentials -g $RESOURCE_GROUP -n $ITERATE_CLUSTER_NAME --admin --overwrite-existing
          pushd $HOME/tanzu-cluster-essentials
          ./install.sh --yes
          popd

      - name: Add TAP package repository on 'iterate' cluster
        run: |
          az aks get-credentials -g $RESOURCE_GROUP -n $ITERATE_CLUSTER_NAME --admin --overwrite-existing
          [[ -z "$(kubectl get ns | grep 'tap-install')" ]] && kubectl create ns tap-install
          tanzu secret registry add tap-registry \
            --username ${AZURE_SP_CLIENT_ID} \
            --password ${AZURE_SP_CLIENT_SECRET} \
            --server ${SHARED_CONTAINER_REGISTRY_HOSTNAME} \
            --export-to-all-namespaces \
            --yes \
            --namespace tap-install
          tanzu package repository add tanzu-tap-repository \
            --url ${SHARED_CONTAINER_REGISTRY_HOSTNAME}/${SHARED_INSTALL_REPO}/tap-packages:$TAP_VERSION \
            --namespace tap-install \
            --wait
          tanzu package repository get tanzu-tap-repository --namespace tap-install
          tanzu package available list --namespace tap-install

      - name: 'Deploy TAP profile: iterate'
        run: |
          # az aks get-credentials -g $RESOURCE_GROUP -n $ITERATE_CLUSTER_NAME --admin --overwrite-existing
          pushd tap
          envsubst < iterate-values.yaml > iterate-values-final.yaml
          tanzu package install tap -p tap.tanzu.vmware.com -v $TAP_VERSION --values-file iterate-values-final.yaml -n tap-install
          rm iterate-values-final.yaml
          popd
          tanzu package installed get tap -n tap-install
          tanzu package installed list -A

      # - name: Create TAP GUI viewer service account
      #   run: |
      #     pushd tap
      #     kubectl apply -f tap-gui-viewer-service-account-rbac.yaml
      #     popd
        
      ## ADD CLUSTERS TO TAP GUI ##############################################
      
      - name: 'Add clusters to TAP GUI'
        run: |
          pushd tap
          echo "Setup auth0 variables."
          export AUTH0_CLIENT_ID=$(az keyvault secret show -n auth0-client-id --vault-name kv-tanzu | jq -r .value)
          export AUTH0_CLIENT_SECRET=$(az keyvault secret show -n auth0-client-secret --vault-name kv-tanzu | jq -r .value)
          az aks get-credentials -g $RESOURCE_GROUP -n $VIEW_CLUSTER_NAME --admin --overwrite-existing
          envsubst < view-values.yaml > view-values-auth0.yaml
          echo "Merging linked clusters into the view cluster's yaml."
          yq eval-all '. as $item ireduce ({}; . * $item )' view-values-auth0.yaml view-values-partial.yaml > view-values-full.yaml
          # cat view-values-full.yaml
          for cluster_name in $BUILD_CLUSTER_NAME $RUN_CLUSTER_NAME; do
            echo "Getting cluster credentials: $cluster_name."
            az aks get-credentials -n $cluster_name -g $RESOURCE_GROUP --admin --overwrite-existing
            # Get the cluster URL and token
            export CLUSTER_URL=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
            export CLUSTER_TOKEN=$(kubectl -n tap-gui get secret tap-gui-viewer -o=json \
              | jq -r '.data["token"]' \
              | base64 --decode)
            envsubst < view-values-full.yaml | sponge view-values-full.yaml
          done
          # cat view-values-full.yaml
          kubectl apply -f view-values-full.yaml
          rm view-values-full.yaml
          popd





          #### TODO TODO TODO TODO
          # Need to redo the view-values.yaml file with envsubst so that ALL env vars are substituted.
          # 